1. Create a function, with the inputs and the outputs

2. Write out test cases

3. Think of All Possible Cases
Possible Cases:
	1. The number query occurs somewhere in the middle of the list cards.
	2. query is the first element in cards.
	3. query is the last element in cards.
	4. The list cards contains just one element, which is the query.
	5. The list cards does not contain the query.
	6. The list cards is empty.
	7. The list cards contains repeating numbers.
		a.The number query occurs at more than one position in cards.

Edge Cases: Rare or extreme examples. E.g. Empty array, query not occuring in cards


4. Brute Force Algorithm
	a. Create a variable POSITION with the value 0
	b. Check whether the # at index POSITION in CARD == QUERY
	c. If it does, POSITION is the answer and return as output
	d. If not, incremement the value of POSITION by 1, and repeat step b -> e until the last position
	e. If number not found, return -1

5. Debugging
	a. Log the inputs
	b. Label the print statements as clear and simple as possible, so that you know what you are looking at
	c. Don't look straight at the code, but try to understand the error first
	d. Debug 


6. Optimize
	a. Find the middle element of the list.
	b. If it matches queried number, return the middle position as the answer.
	c. If it is less than the queried number, then search the first half of the list
	d. If it is greater than the queried number, then search the second half of the list
	e. If no more elements remain, return -1.
	